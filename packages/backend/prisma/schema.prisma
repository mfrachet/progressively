// RULE NÂ°1: no database specific attributes / behaviours.
// If you need enums, use a string and define the enum in a TS file
// Make the check at the code level, not at the DB level

datasource POSTGRES_DATASOURCE {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

model User {
  uuid                String                @id @default(uuid())
  fullname            String
  email               String                @unique
  password            String
  userProject         UserProject[]
  activationToken     String?
  // the values set in users/status.ts
  status              String
  RefreshToken        RefreshToken[]
  PasswordResetTokens PasswordResetTokens[]
}

model Project {
  uuid         String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  name         String
  environments Environment[]
  userProject  UserProject[]
}

model UserProject {
  user   User   @relation(fields: [userId], references: [uuid])
  userId String

  project   Project @relation(fields: [projectId], references: [uuid])
  projectId String

  // the values set in users/roles.ts
  role String

  @@id([userId, projectId])
}

model Environment {
  uuid            String            @id @default(uuid())
  name            String
  project         Project           @relation(fields: [projectId], references: [uuid])
  projectId       String
  flagEnvironment FlagEnvironment[]
  clientKey       String            @default(uuid())
}

model Flag {
  uuid            String            @id @default(uuid())
  name            String
  key             String
  description     String
  createdAt       DateTime          @default(now())
  flagEnvironment FlagEnvironment[]
}

model FlagEnvironment {
  flag          Flag              @relation(fields: [flagId], references: [uuid])
  flagId        String
  environment   Environment       @relation(fields: [environmentId], references: [uuid])
  environmentId String
  flagHit       FlagHit[]
  // the values set in flags/flag.status.ts
  status        String            @default("NOT_ACTIVATED")
  strategies    RolloutStrategy[]

  @@id([flagId, environmentId])
}

model FlagHit {
  id                           Int             @id @default(autoincrement())
  date                         DateTime        @default(now())
  flagEnvironment              FlagEnvironment @relation(fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
  flagEnvironmentFlagId        String
  flagEnvironmentEnvironmentId String
  status                       String
}

model RefreshToken {
  id      Int      @id @default(autoincrement())
  user    User     @relation(fields: [userId], references: [uuid])
  userId  String
  expired DateTime
  value   String
}

model RolloutStrategy {
  uuid String @id @default(uuid())
  name String

  // strategy rule
  strategyRuleType String // available values in modules/strategies/types/SrategyRule
  // related to strategy type "field"
  fieldName        String?
  fieldComparator  String?
  fieldValue       String?

  // activation
  activationType String // available values in modules/strategies/types/Activation

  // related to activation type "percentage"
  rolloutPercentage Int?

  // Relations
  FlagEnvironment              FlagEnvironment? @relation(fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
  flagEnvironmentFlagId        String?
  flagEnvironmentEnvironmentId String?
}

model PasswordResetTokens {
  uuid     String   @id @default(uuid())
  dateEnd  DateTime
  token    String
  user     User     @relation(fields: [userUuid], references: [uuid])
  userUuid String
}
